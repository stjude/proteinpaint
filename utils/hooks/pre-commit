#!/bin/sh

set -e

STAGEDFILES=$(git diff --cached --name-only | sed 's| |\\ |g')

# doing per GDC requirements
pre-commit run --files "$STAGEDFILES"

# select changed/added file extensions where prettier format is preferred,
# for other file extensions nests, prettier rules might not be preferred,
# for example it nests html tags too much
FILES=$(git diff --cached --name-only --diff-filter=ACM "*.js" "*.ts" "*.mjs" "*.cjs" | sed 's| |\\ |g')

if [[ "$FILES" != "" ]]; then
	echo "Prettifying $FILES ..."

	# Prettify all selected files
	# configuration are under the `"prettier": {}` object in package.json
	echo "$FILES" | xargs npx prettier --no-semi --use-tabs --write

	# Add back the modified/prettified files to staging
	echo "$FILES" | xargs git add

	# lint against team preferences
	echo "Linting ..."
	echo "$FILES" | grep "shared\/" | grep "\.ts" | xargs npx eslint --env shared-node-browser
	echo "$FILES" | grep "client\/" | grep "\.ts" | xargs npx eslint --env browser
	echo "$FILES" | grep "front\/" | grep "\.ts" | xargs npx eslint --env browser
	echo "$FILES" | grep "rust\/" | grep "\.ts" | xargs npx eslint --env node
	echo "$FILES" | grep "server\/" | grep "\.ts" | xargs npx eslint --env node
	echo "$FILES" | grep "/R\/" | grep "\.ts" | xargs npx eslint --env node

	# check for invalid use of .Inner reference
	echo "checking for forbidden .Inner. usage"
	set +e
	PRODINNER=$(echo "$FILES" | xargs grep -lr --exclude=\*.spec\* --exclude=\*dist\/ --exclude=\*test\/ --exclude=\*front.helpers\* --exclude=\*.md "\.Inner\.")
	set -e
	if [[ "$PRODINNER" != "" ]]; then
		echo "\n--- !!! forbidden use of .Inner. found in: !!! ---"
		echo "$PRODINNER\n"
		exit 1
	fi
fi

# Add Rust formatting and linting for files in the rust/src directory.
# We check if Rust files have been modified, run `cargo fmt` and `cargo clippy` on them.
# We need two variables:
# 1. Full paths for git operations
# 2. Just filenames for rustfmt/clippy
RUST_FULL_PATHS=$(git diff --cached --name-only --diff-filter=ACM "*.rs" | sed 's| |\\ |g')

if [[ "$RUST_FULL_PATHS" != "" ]]; then
  # echo "RUST_FULL_PATHS: $RUST_FULL_PATHS"
  
  echo "formatting $RUST_FULL_PATHS"
  rustfmt $RUST_FULL_PATHS

  # Change to rust/src directory
  cd rust/src
  # Extract just the filenames without the path prefix
  RUST_FILES=$(echo "$RUST_FULL_PATHS" | xargs basename)
  # Lint each file
  # echo "Linting Rust files with clippy..."
  # for f in $RUST_FILES; do
    #echo "Linting $f..."
	# cargo clippy 
    # clippy-driver --edition 2024 -Cpanic=abort $f
    # Get the base filename without extension
    #BINARY_NAME=$(basename "$f" .rs)
    #echo "Deleting binary: $BINARY_NAME"
		#rm -f "$BINARY_NAME"
  #done

  # Return to original directory
  cd ../..
  
  # Add back the formatted Rust files to staging
  echo "$RUST_FULL_PATHS" | xargs git add
fi

exit 0