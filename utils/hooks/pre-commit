#!/bin/sh

set -e

STAGEDFILES=$(git diff --cached --name-only | sed 's| |\\ |g')

# doing per GDC requirements
pre-commit run --files "$STAGEDFILES"

# select changed/added file extensions where prettier format is preferred,
# for other file extensions nests, prettier rules might not be preferred,
# for example it nests html tags too much
FILES=$(git diff --cached --name-only --diff-filter=ACM "*.js" "*.ts" "*.mjs" "*.cjs" | sed 's| |\\ |g')

if [[ "$FILES" != "" ]]; then
	echo "Prettifying $FILES ..."

	# Prettify all selected files
	# configuration are under the `"prettier": {}` object in package.json
	echo "$FILES" | xargs npx prettier --no-semi --use-tabs --write

	# Add back the modified/prettified files to staging
	echo "$FILES" | xargs git add

	# lint against team preferences
	echo "Linting ..."
	echo "$FILES" | grep "shared\/" | grep "\.ts" | xargs npx eslint --env shared-node-browser
	echo "$FILES" | grep "client\/" | grep "\.ts" | xargs npx eslint --env browser
	echo "$FILES" | grep "front\/" | grep "\.ts" | xargs npx eslint --env browser
	echo "$FILES" | grep "rust\/" | grep "\.ts" | xargs npx eslint --env node
	echo "$FILES" | grep "server\/" | grep "\.ts" | xargs npx eslint --env node
	echo "$FILES" | grep "/R\/" | grep "\.ts" | xargs npx eslint --env node

	# check for invalid use of .Inner reference
	echo "checking for forbidden .Inner. usage"
	set +e
	PRODINNER=$(echo "$FILES" | xargs grep -lr --exclude=\*.spec\* --exclude=\*dist\/ --exclude=\*test\/ --exclude=\*front.helpers\* --exclude=\*.md "\.Inner\.")
	set -e
	if [[ "$PRODINNER" != "" ]]; then
		echo "\n--- !!! forbidden use of .Inner. found in: !!! ---"
		echo "$PRODINNER\n"
		exit 1
	fi
fi

# Add Rust formatting and linting for files in the rust/src directory.
# We check if Rust files have been modified, run `cargo fmt` and `cargo clippy` on them.
RUST_FULL_PATHS=$(git diff --cached --name-only --diff-filter=ACM "*.rs" | sed 's| |\\ |g')

if [[ "$RUST_FULL_PATHS" != "" ]]; then
  echo "Formatting Rust files..."
  rustfmt $RUST_FULL_PATHS
  
  # Add back the formatted Rust files to staging
  echo "$RUST_FULL_PATHS" | xargs git add
  
  # Run clippy on changed files only and check for new warnings
  echo "Running Clippy on changed Rust files..."
  
  # Store original directory
  ORIG_DIR=$(pwd)
  
  # Change to the rust directory for running clippy
  cd rust
  
  # Extract relative paths for clippy (remove the "rust/" prefix if needed)
  RUST_CLIPPY_PATHS=$(echo "$RUST_FULL_PATHS" | sed 's|^rust/||g')
  echo "Clippy paths: $RUST_CLIPPY_PATHS"

  # Run clippy
  cargo clippy --message-format=json | python3 linting/compare_with_baseline.py

  
  # Save the baseline path
  BASELINE_PATH="linting/clippy_baseline.json"
  
  # Make sure the baseline exists
  if [ ! -f "$BASELINE_PATH" ]; then
    echo "Warning: Clippy baseline file not found at $BASELINE_PATH"
    echo "Creating an initial baseline..."
    mkdir -p linting
    cargo clippy --message-format=json > "$BASELINE_PATH"
  fi
  
  
  # If the script found new warnings, prevent the commit
  # if [ $SCRIPT_EXIT_CODE -eq 1 ]; then
  #   echo "❌ New Clippy warnings detected! Please fix them before committing."
  #   echo "Run the following command to see the warnings:"
  #   echo "cd rust && cargo clippy -- $RUST_CLIPPY_PATHS"
  #   cd "$ORIG_DIR"
  #   exit 1
  # else
  #   # Even if clippy had errors but no new warnings were found, allow the commit
  #   if [ $CLIPPY_EXIT_CODE -ne 0 ]; then
  #     echo "⚠️ Clippy reported compilation errors, but no new warnings were detected in your changes."
  #     echo "Commit allowed, but you should fix these errors soon."
  #   else
  #     echo "✅ No new Rust warnings detected. Commit allowed."
  #   fi
  # fi
  
  # Return to original directory
  cd "$ORIG_DIR"
fi

exit 0