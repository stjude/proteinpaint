name: 'Publish Deps Docker Image'
description: 'Build and publish Deps Docker image to GitHub Container Registry.'
inputs:
  PAT:
    description: 'PAT secret'
    required: true
  GITHUB_ACTOR:
    description: 'github_actor'
    required: true
runs:
  using: 'composite'

  steps:
    - name: Login to Github
      uses: docker/login-action@v3.4.0
      with:
        registry: ghcr.io
        username: ${{ inputs.GITHUB_ACTOR }}
        password: ${{ inputs.PAT }}

    - uses: actions/setup-node@v4
      with:
        cache: 'npm'
        node-version: '22'

    - name: Install PP packages
      shell: bash
      run: |
        npm ci    

    - name: Copy serverconfig.json to root
      shell: bash
      run: |
        cp container/ci/serverconfig.json container/

    - name: Create cache folder
      shell: bash
      run: mkdir cache

    - name: Build image
      shell: bash
      run: |
        npm install glob
        cd container

        BRANCH=$(git rev-parse --abbrev-ref HEAD)

        if [[ "$BRANCH" != "publish-image" && "$BRANCH" != "release-chain" && "$BRANCH" != "master" && ${{ github.event_name }} != "workflow_dispatch" && ! "$BRANCH" =~ ^(release|prerelease) ]]; then
          echo "Skipping build and publishing"
          exit 0
        fi

        ./pack.sh
        mkdir -p ./deps/tmppack
        cp -a ./tmppack/. ./deps/tmppack/

        cd deps
        ./version.sh deps
        ./build.sh -m "ghcr.io/stjude/"
        TAG="$(node -p "require('./package.json').version")"
        cd ..

        ./run.sh ghcr.io/stjude/ppserver:$TAG
        sleep 10
        cd ..
        xvfb-run --auto-servernum npm run test:integration

        HASH=$(git rev-parse --short HEAD 2>/dev/null)
        docker push ghcr.io/stjude/ppbase:latest
        docker push ghcr.io/stjude/ppserver:$TAG
        docker push ghcr.io/stjude/ppfull:$TAG
        docker push ghcr.io/stjude/ppserver:latest
        docker push ghcr.io/stjude/ppfull:latest

        cd container
        ./update_deps_version.sh $TAG ./full/Dockerfile
        ./update_deps_version.sh $TAG ./server/Dockerfile

        if [[ "$BRANCH" =~ ^(release|prerelease) ]]; then
          git config --global user.email "PPTeam@STJUDE.ORG"
          git config --global user.name "PPTeam CI"
          git add deps/package.json
          git add full/Dockerfile
          git add server/Dockerfile
          git commit -m "Update deps version to $TAG"
          git stash -a
          git push origin $BRANCH   
          echo "On release/prerelease branch, not merging to master."
          exit 0
        fi

        if [[ "$BRANCH" == "master" ]]; then
          BRANCH=temp # create a different branch to make it easier to merge to master instead of rebase
          git checkout -b $BRANCH
        fi

        git config --global user.email "PPTeam@STJUDE.ORG"
        git config --global user.name "PPTeam CI"

        git add deps/package.json
        git add full/Dockerfile
        git add server/Dockerfile
        git commit -m "Update deps version to $TAG"
        git stash -a

        echo "Merging to master"
        git fetch --depth=10 origin master:master
        git switch master
        git merge $BRANCH
        git push origin master    
