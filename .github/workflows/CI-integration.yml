name: Integration tests

on:
  schedule:
    - cron: '0 6 * * *'
  workflow_dispatch:
    inputs:
      build_secret:
        type: string
        description: Build secret
  workflow_call: {}

jobs:
  check-user-permissions:
    runs-on: ubuntu-22.04
    steps:
      - id: set-build-secret
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "BUILD_SECRET=${{ github.event.inputs.build_secret }}" >> $GITHUB_OUTPUT
          else
            echo "BUILD_SECRET=${{ secrets.BUILD_SECRET }}" >> $GITHUB_OUTPUT
          fi
      - name: Check user permission
        uses: stjude/proteinpaint/.github/actions/check-user-permissions@master
        with:
          BUILD_SECRET: ${{ secrets.BUILD_SECRET }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          INPUT_BUILD_SECRET: ${{ steps.set-build-secret.outputs.BUILD_SECRET }}

  build:
    needs: check-user-permissions
    runs-on: ubuntu-22.04
    timeout-minutes: 20
    outputs:
      updated_rust: ${{ steps.check-rust-changes.outputs.updated_rust }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 10

      - uses: actions/setup-node@v4
        with:
          cache: 'npm'
          node-version: '22'

      - name: Install PP packages
        run: |
          npm ci

      # Add Rust change detection step
      - name: Check for Rust workspace changes
        id: check-rust-changes
        run: |
          CHANGEDWS=$(./build/bump.js prerelease)
          
          if [[ "$CHANGEDWS" == *"rust"* ]]; then
            echo "Rust workspace changes detected"
            echo "updated_rust=true" >> $GITHUB_OUTPUT
          else
            echo "No Rust workspace changes detected"
            echo "updated_rust=false" >> $GITHUB_OUTPUT
          fi
  # Add Rust build job when Rust changes are detected
  rust-build:
    if: needs.build.outputs.updated_rust == 'true'
    needs: build
    uses: ./.github/workflows/CD-rust-build.yml

  # Add Docker build job with Rust binaries
  docker-with-rust:
    needs: [rust-build]
    if: needs.build.outputs.updated_rust == 'true'
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 10

      - name: Download Rust binaries
        uses: actions/download-artifact@v4
        with:
          name: rust-binaries
          path: rust-binaries

      - uses: actions/setup-node@v4
        with:
          cache: 'npm'
          node-version: '22'

      - name: Install PP packages
        run: |
          npm ci

      - name: Login to Github
        uses: docker/login-action@v3.4.0
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.PAT }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Prepare for Docker build
        run: |
          # Pack tarballs
          cd ./container
          ./pack.sh
          cd ..

          SOURCE_DIR="rust-binaries"
          TARBALL_DIR="container/tmppack"
          TARBALL_PATTERN="sjcrh-proteinpaint-rust-*.tgz"
          DEST_DIR="target/release"

          # Find the tarball
          TARBALL_PATH=$(find "$TARBALL_DIR" -type f -name "$TARBALL_PATTERN" | head -n 1)

          if [ -z "$TARBALL_PATH" ]; then
            echo "Error: No tarball found matching pattern $TARBALL_PATTERN in $TARBALL_DIR"
            exit 1
          fi

          echo "Using tarball: $TARBALL_PATH"

          # Create temp working dir
          TMP_DIR=$(mktemp -d)

          # Extract current tarball
          tar -xzf "$TARBALL_PATH" -C "$TMP_DIR"

          # Create destination dir inside extracted structure
          mkdir -p "$TMP_DIR/$DEST_DIR"

          # Copy new files and track additions
          ADDED_FILES=()
          for file in "$SOURCE_DIR"/*; do
            cp "$file" "$TMP_DIR/$DEST_DIR/"
            ADDED_FILES+=("$DEST_DIR/$(basename "$file")")
          done

          # Repack into .tgz (overwrite original)
          tar -czf "$TARBALL_PATH" -C "$TMP_DIR" .

          # Output added files
          echo "Added files:"
          for f in "${ADDED_FILES[@]}"; do
            echo "$f"
          done

          # ✅ Verify that package.json exists in tarball
          echo "Verifying contents of tarball..."
          if tar -tzf "$TARBALL_PATH" | grep -q "package.json"; then
            echo "✅ package.json found in tarball."
          else
            echo "❌ package.json NOT found in tarball!"
            exit 1
          fi

      - name: Copy serverconfig.json to root
        run: |
          cp container/ci/serverconfig.json container/

      - name: Create cache folder
        run: mkdir cache

      - name: Install xvfb
        run: sudo apt-get install xvfb

      - name: TSC
        run: |
          cd shared/types
          npm run build
          cd ../../server
          npx tsc
          cd ..

      - name: Build Docker Image
        uses: docker/build-push-action@v5
        with:
          context: ./container/
          file: ./container/server/Dockerfile
          tags: ppserver:latest
          platforms: linux/amd64
          outputs: type=docker
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Run local server and integration tests
        run: |
          cd ./container
          ./run.sh ppserver:latest
          sleep 10
          cd ..
          xvfb-run --auto-servernum npm run test:integration

      - name: Get current time
        id: current-time
        if: always()
        run: |
          echo "formattedTime=$(TZ=America/Chicago date '+%b %d, %Y %H:%M:%S')" >> "$GITHUB_OUTPUT"

      - name: Set short git commit SHA
        id: vars
        if: always()
        run: echo "SHORT_SHA=$(git rev-parse --short ${{ github.sha }})" >> $GITHUB_ENV

      - name: Post build results on slack
        id: slack
        if: always()
        uses: slackapi/slack-github-action@v1.23.0
        with:
          payload: |
            {
              "status": "${{ job.status }} https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}",
              "commit": "${{ env.SHORT_SHA }}",
              "date-time": "${{ steps.current-time.outputs.formattedTime }}"
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      # Add Docker build job with Rust binaries
  docker-without-rust:
    needs: [build]
    if: needs.build.outputs.updated_rust == 'false'
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 10

      - uses: actions/setup-node@v4
        with:
          cache: 'npm'
          node-version: '22'

      - name: Install PP packages
        run: |
          npm ci

      - name: Login to Github
        uses: docker/login-action@v3.4.0
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.PAT }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Prepare for Docker build
        run: |          
          # Pack tarballs
          cd ./container
          ./pack.sh

      - name: Build and push Docker image with Rust
        uses: docker/build-push-action@v5
        with:
          context: ./container/
          file: ./container/server/Dockerfile
          platforms: linux/amd64
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Copy serverconfig.json to root
        run: |
          cp container/ci/serverconfig.json container/

      - name: Create cache folder
        run: mkdir cache

      - name: Install xvfb
        run: sudo apt-get install xvfb

      - name: TSC
        run: |
          cd shared/types
          npm run build
          cd ../../server
          npx tsc
          cd ..

      - name: Build Docker Image
        uses: docker/build-push-action@v5
        with:
          context: ./container/
          file: ./container/server/Dockerfile
          tags: ppserver:latest
          platforms: linux/amd64
          outputs: type=docker
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Run local server and integration tests
        run: |
          cd ./container
          ./run.sh ppserver:latest
          sleep 10
          cd ..
          xvfb-run --auto-servernum npm run test:integration

      - name: Get current time
        id: current-time
        if: always()
        run: |
          echo "formattedTime=$(TZ=America/Chicago date '+%b %d, %Y %H:%M:%S')" >> "$GITHUB_OUTPUT"

      - name: Set short git commit SHA
        id: vars
        if: always()
        run: echo "SHORT_SHA=$(git rev-parse --short ${{ github.sha }})" >> $GITHUB_ENV

      - name: Post build results on slack
        id: slack
        if: always()
        uses: slackapi/slack-github-action@v1.23.0
        with:
          payload: |
            {
              "status": "${{ job.status }} https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}",
              "commit": "${{ env.SHORT_SHA }}",
              "date-time": "${{ steps.current-time.outputs.formattedTime }}"
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}