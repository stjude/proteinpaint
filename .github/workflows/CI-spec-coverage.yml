name: Spec Coverage

on:
  workflow_dispatch:
    inputs:
      build_secret:
        type: string
        description: Build secret

  workflow_call: {}

jobs:
  check-user-permissions:
    runs-on: ubuntu-22.04
    steps:
      - id: set-build-secret
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "::set-output name=BUILD_SECRET::${{ github.event.inputs.build_secret }}"
          else
            echo "::set-output name=BUILD_SECRET::${{ secrets.BUILD_SECRET }}"
          fi
      - name: Check user permission
        uses: stjude/proteinpaint/.github/actions/check-user-permissions@master
        with:
          BUILD_SECRET: ${{ secrets.BUILD_SECRET }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          INPUT_BUILD_SECRET: ${{ steps.set-build-secret.outputs.BUILD_SECRET }}

  test:
    needs: check-user-permissions
    runs-on: ubuntu-22.04
    timeout-minutes: 15
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 10

      - uses: actions/setup-node@v3
        with:
          cache: 'npm'
          node-version: '20'

      - name: Install PP packages
        run: |
          npm ci

      - name: Install xvfb
        run: sudo apt-get install xvfb

      - name: Login to Github
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.PAT }}

      - name: Fetch master
        run: |
          git fetch --depth=10 origin master:master

      - name: Run relevant augen specs
        run: |
          cd augen
          npm run spec:coverage
          cd ..

      - name: Detect if integration tests are required
        run: |
          echo "HAS_INTEGRATION_TESTS=$(node ./test/hasIntegrationSpecs.mjs)" >> $GITHUB_ENV

      - name: Run server unit tests outside of container
        run: |
          cd server
          cp ../container/ci/serverconfig.json .
          npm run spec:coverage
          rm -f serverconfig.json

      - name: Set up Docker Buildx
        if: contains(env.HAS_INTEGRATION_TESTS, 'true')
        uses: docker/setup-buildx-action@v3

      - name: Prepare serverconfig.json and cachedir
        run: |
          cp container/ci/serverconfig.json container/
          mkdir cache

      - name: Pack tarballs for updated workspaces
        if: contains(env.HAS_INTEGRATION_TESTS, 'true')
        run: |
          cd ./container
          ./pack.sh

      - name: Build Docker Image
        if: contains(env.HAS_INTEGRATION_TESTS, 'true')
        uses: docker/build-push-action@v5
        with:
          context: ./container/
          file: ./container/server/Dockerfile
          tags: ppserver:latest
          platforms: linux/amd64
          outputs: type=docker
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Generate client unit/integration spec coverage report
        # TODO: inside the ppcov container (see CI-coverage.yml), 
        # limit server spec:coverage runs to integration specs;
        # doesn't need ppcov here since there are no server *.integration.spec.js
        # that needs to run separately, only client has integration tests right now
        if: contains(env.HAS_INTEGRATION_TESTS, 'true')
        run: |
          cd ./container
          ./run.sh ppserver:latest
          sleep 10
          cd ../client
          xvfb-run --auto-servernum npm run spec:coverage

      - name: Generate client unit-spec-only coverage report
        if: ${{ !contains(env.HAS_INTEGRATION_TESTS, 'true') }}
        run: |
          cd client
          xvfb-run --auto-servernum npm run spec:coverage

      - name: Display coverage results
        run: |
          echo "# Coverage report for relevant spec tests" >> $GITHUB_STEP_SUMMARY
          echo -e "$(node test/emitSpecMarkdown.mjs)" >> $GITHUB_STEP_SUMMARY
