name: Spec Coverage

on:
  pull_request_target:
    types:
      - closed

  workflow_dispatch:
    inputs:
      build_secret:
        type: string
        description: Build secret

  workflow_call: {}

jobs:
  check-user-permissions:
    runs-on: ubuntu-22.04
    steps:
      - id: set-build-secret
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "::set-output name=BUILD_SECRET::${{ github.event.inputs.build_secret }}"
          else
            echo "::set-output name=BUILD_SECRET::${{ secrets.BUILD_SECRET }}"
          fi
      - name: Check user permission
        uses: stjude/proteinpaint/.github/actions/check-user-permissions@master
        with:
          BUILD_SECRET: ${{ secrets.BUILD_SECRET }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          INPUT_BUILD_SECRET: ${{ steps.set-build-secret.outputs.BUILD_SECRET }}

  test:
    if: github.event.pull_request.merged || github.event_name == 'workflow_dispatch'
    needs: check-user-permissions
    runs-on: ubuntu-22.04
    timeout-minutes: 15
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 1
          token: ${{ secrets.PAT }}

      - uses: actions/setup-node@v3
        with:
          cache: 'npm'
          node-version: '22'

      - name: Install dependencies for canvas
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            build-essential \
            libcairo2-dev \
            libpango1.0-dev \
            libjpeg-dev \
            libgif-dev \
            librsvg2-dev      

      - name: Install PP packages
        run: |
          npm ci

      - name: Install xvfb
        run: sudo apt-get install xvfb

      - name: Fetch commitRef
        run: |
          git fetch origin $(cat public/coverage/commitRef)

      - name: Run relevant augen specs
        run: |
          cd augen
          npm run spec:coverage

      - name: Run relevant shared/utils specs
        run: |
          cd shared/utils
          npm run spec:coverage

      - name: Detect if integration tests are required
        run: |
          echo "HAS_INTEGRATION_TESTS=$(node ./test/hasIntegrationSpecs.mjs)" >> $GITHUB_ENV

      - name: Run server unit tests outside of container
        run: |
          cd server
          cp ../container/ci/serverconfig.json .
          npm run spec:coverage
          rm -f serverconfig.json

      - name: Set up Docker Buildx
        if: contains(env.HAS_INTEGRATION_TESTS, 'true')
        uses: docker/setup-buildx-action@v3

      - name: Prepare serverconfig.json and cachedir
        run: |
          cp container/ci/serverconfig.json container/
          if [[ ! -d cache ]]; then
            mkdir cache
          fi

      - name: Pack tarballs for updated workspaces
        if: contains(env.HAS_INTEGRATION_TESTS, 'true')
        run: |
          cd ./container
          ./pack.sh

      - name: Build Docker Image
        if: contains(env.HAS_INTEGRATION_TESTS, 'true')
        uses: docker/build-push-action@v5
        with:
          context: ./container/
          file: ./container/server/Dockerfile
          tags: ppserver:latest
          platforms: linux/amd64
          outputs: type=docker
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Generate client unit/integration spec coverage report
        # TODO: inside the ppcov container (see CI-coverage.yml), 
        # limit server spec:coverage runs to integration specs;
        # doesn't need ppcov here since there are no server *.integration.spec.js
        # that needs to run separately, only client has integration tests right now
        if: contains(env.HAS_INTEGRATION_TESTS, 'true')
        run: |
          cd ./container
          ./run.sh ppserver:latest
          sleep 10
          cd ../client
          xvfb-run --auto-servernum npm run spec:coverage || echo "TEST_FAILED=true" >> $GITHUB_ENV

      - name: Generate client unit-spec-only coverage report
        if: ${{ !contains(env.HAS_INTEGRATION_TESTS, 'true') }}
        run: |
          cd client
          xvfb-run --auto-servernum npm run spec:coverage || echo "TEST_FAILED=true" >> $GITHUB_ENV

      - name: Display coverage results
        run: |
          git diff --name-only            # detect unstaged changes, if any, to help debug this workflow step
          git restore .                   # discard unstaged changes such as from running pack.sh in an earlier step
          git pull --rebase               # in case the upstream branch was updated during this CI run,
                                          # pull those updates before before evaluating spec coverage results 
                                          # that will generate new extracts to be merged to the coverage json
                                          # NOTE that nothing has been committed at this point

          # NOTE: this command will update workspace coverage file and stage them with `git add`
          node test/evalAllSpecCovResults.mjs 0

          FAILEDTEXTFILE=./public/coverage/specs/failedTexts.txt
          if [[ -f $FAILEDTEXTFILE ]]; then
            echo "# !!! Failed spec coverage !!! " >> $GITHUB_STEP_SUMMARY
            cat $FAILEDTEXTFILE >> $GITHUB_STEP_SUMMARY
            echo -e "\n" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "# Coverage report for relevant spec tests" >> $GITHUB_STEP_SUMMARY
          echo -e "$(node test/emitSpecMarkdown.mjs)" >> $GITHUB_STEP_SUMMARY

      - name: Commit updated coverage file
        run: |
          BRANCH=$(git rev-parse --abbrev-ref HEAD)
          # evalSpecCoveResults() will stage <workspace>-coverage.json(s) if applicable
          STAGEDFILES=$(git diff --cached --name-only | sed 's| |\\ |g')
          echo -e "STAGEDFILES=[\n$STAGEDFILES\n]\n"
          
          # this CI is intended to run on approving and closing a PR
          if [[ "$BRANCH" == "master" && "$STAGEDFILES" != "" ]]; then
            git config --global user.email "PPTeam@STJUDE.ORG"
            git config --global user.name "PPTeam CI"

            git diff --staged --name-only   # display staged changes to be committed later, expected to be workspace coverage json
            git commit -m "update relevant workspace coverage json(s)"
            
            echo "$(git rev-parse HEAD)" > public/coverage/commitRef   # save the last rebased commit hash as reference for computing changed files
            git add public/coverage/commitRef                          # cannot combine this commit with the last one, since the commitRef must have the updated workspace coverage json 
            git commit -m "update public/coverage/commitRef"

            git push origin $BRANCH
          fi

      - name: Post build results on Slack
        if:  ${{ env.TEST_FAILED == 'true' }}
        uses: slackapi/slack-github-action@v1.23.0
        with:
          payload: |
            {
              "status": "Failed unit and/or integration test(s) - https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}",
              "commit": "${{ env.SHORT_SHA }}",
              "date-time": "${{ steps.current-time.outputs.formattedTime }}"
            }
        env:
          SLACK_WEBHOOK_URL: ${{ inputs.SLACK_WEBHOOK_URL }}

      - name: Detect failure
        run: |
          FAILEDTEXTFILE=./public/coverage/specs/failedTexts.txt
          if [[ -f $FAILEDTEXTFILE || "${{ env.TEST_FAILED }}" == "true" ]]; then
            exit 1
          fi
